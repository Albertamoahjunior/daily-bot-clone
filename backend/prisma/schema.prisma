// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//database schemas
model Member {
  id            String   @id @default(cuid())
  teams        String[]
  memberName          String
  // team          Team     @relation(fields: [teamId], references: [id])
  kudosGiven    Kudos[]  @relation("KudosGiver")
  kudosReceived Kudos[]  @relation("KudosReceiver")
  moodResponses MoodResponse[]
}

model Team {
  id            String   @id @default(cuid())
  teamName      String   
  status        String?  // STATUS
  questionRefId String?   // QUESTION REFID
  timezone      String   // TIMEZONE
  standup       Standup?
  members       String[] 
  moodResponses MoodResponse[]
}

model Standup {
  id            String   @id @default(cuid())
  teamId        String   @unique
  standupDays   String[] // STANDUP DAYS
  reminderTimes String[] // REMINDER TIMES
  team          Team     @relation(fields: [teamId], references: [id])
}

model StandupResponse {
  id          String   @id @default(cuid())
  questionId  String   // QUESTIONID
  userId      String   // USERID
  answer      String?   // ANSWER
  options     String[] // OPTIONS
  teamId      String //Team
  createdAt   DateTime @default(now())
  question    StandupQuestion @relation(fields: [questionId], references: [id])
}

model PollResponse {
  id          String   @id @default(cuid())
  pollId      String   // POLLID
  userId      String   // USERID
  teamId      String    //teamId
  answer      String[]   // ANSWER
  createdAt   DateTime  @default(now())// CREATEDAT
  poll        PollQuestion @relation(fields: [pollId], references: [id])
}

model StandupQuestion {
  id            String   @id @default(cuid())
  teamId        String   // TEAM ID
  questionText  String   // QUESTION TEXT
  options       String[] // OPTIONS
  questionType  String   // QUESTION TYPE
  required      Boolean  // REQUIRED: BOOLEAN
  responses     StandupResponse[]
}

model PollQuestion {
  id          String   @id @default(cuid())
  teamId      String   // TEAMID
  question    String   // QUESTION
  options     String[] // OPTIONS
  choiceType  String   //multi/single
  anonymous   Boolean @default(true) //anonimity of poll
  createdAt   DateTime  @default(now())// CREATEDAT
  responses   PollResponse[]
}

model Kudos {
  id            String   @id @default(cuid())
  giverId       String   // GIVERID/REF
  receiverId    String   // RECEIVERID/REF
  teamId        String   // TEAMID
  reason        String   // REASON
  category      String   // CATEGORY
  createdAt     DateTime    @default(now())// CREATEDAT
  giver         Member   @relation("KudosGiver", fields: [giverId], references: [id])
  receiver      Member   @relation("KudosReceiver", fields: [receiverId], references: [id])
}

//model for kudos category
model KudosCategory{
  id          String   @id @default(cuid())
  category    String   // CATEGORY
  description String   // DESCRIPTION
  teamId      String // team which these caategories belong to
  createdAt   DateTime  @default(now())// CREATEDAT
}


//model for mood response
model MoodResponse {
  id          String   @id @default(cuid())
  userId      String   // USERID
  teamId      String   // TEAMID
  moodId        String   // MOOD
  anonymous   Boolean  // ANONYMOUS
  createdAt   DateTime   @default(now())// CREATEDAT
  member      Member   @relation(fields: [userId], references: [id])
  team        Team     @relation(fields: [teamId], references: [id])
}

//model for moods
model Mood {
  id          String   @id @default(cuid())
  mood        String   // MOOD
  teamId      String   // TEAMID
  description String   // DESCRIPTION
  createdAt   DateTime  @default(now())// CREATEDAT
}
